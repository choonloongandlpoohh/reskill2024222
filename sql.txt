drop table address;
drop table foods;
drop table cars;

create table foods
(
	ID int generated always as identity primary key,
	name varchar(50) unique
);

create table cars
(
	ID int generated always as identity primary key,
	name varchar(50) unique
);

create table address
(
	ID int generated always as identity primary key,
	name varchar(10) NOT NULL,
	birthday date,
	hphone varchar(13) NOT NULL,
	memo varchar(100),
	food varchar(50),
	car varchar(50),

	CONSTRAINT fk_address_food
		FOREIGN KEY(food)
		REFERENCES foods(name)
		on delete cascade
		on update cascade,

	CONSTRAINT fk_address_car
		FOREIGN KEY(car)
		REFERENCES cars(name)
		on delete cascade
		on update cascade
);

insert into foods (name) values ('짜장면');
insert into foods (name) values ('짬뽕');
insert into foods (name) values ('새우튀김');
insert into foods (name) values ('고기완자');

insert into cars (name) values ('sonata');
insert into cars (name) values ('benz');
insert into cars (name) values ('bmw');
insert into cars (name) values ('audi');
insert into cars (name) values ('tico');

insert into address(name, birthday, hphone, memo, food, car) values('홍길동', '1987-01-05', '010-1111-1111', '절친', '짜장면', 'bmw');
insert into address(name, birthday, hphone, memo, food, car) values('박길동', '2010-03-07', '010-1123-0515', '', '짜장면', 'sonata');
insert into address(name, birthday, hphone, memo, food, car) values('최길동', '2000-01-01', '010-5515-4574', '절친', '새우튀김', 'benz');
insert into address(name, birthday, hphone, memo, food, car) values('나길동', '1998-03-14', '010-7743-5743', '돈 빌림', '새우튀김', 'bmw');
insert into address(name, birthday, hphone, memo, food, car) values('윤지원', '1996-04-22', '010-7457-6475', '', '고기완자', 'bmw');
insert into address(name, birthday, hphone, memo, food, car) values('고길동', '2007-09-09', '010-3511-5858', '', '고기완자', NULL);
insert into address(name, birthday, hphone, memo, food, car) values('박길동', '1997-05-05', '010-4874-7871', '절친 아님', '짬뽕', NULL);

#########################################################################################################

drop table address;
drop table foods;
drop table cars;

create table foods
(
	ID int generated always as identity primary key,
	name varchar(50) unique
);

create table cars
(
	ID int generated always as identity primary key,
	name varchar(50) unique
);


create table address
(
	ID int generated always as identity primary key,
	name varchar(10) NOT NULL,
	birthday date,
	hphone varchar(13) NOT NULL,
	memo varchar(100),
	food int,
	car int,

	CONSTRAINT fk_address_food
		FOREIGN KEY(food)
		REFERENCES foods(ID),

	CONSTRAINT fk_address_car
		FOREIGN KEY(car)
		REFERENCES cars(ID)
);

insert into foods (name) values ('짜장면');
insert into foods (name) values ('짬뽕');
insert into foods (name) values ('새우튀김');
insert into foods (name) values ('고기완자');

insert into cars (name) values ('sonata');
insert into cars (name) values ('benz');
insert into cars (name) values ('bmw');
insert into cars (name) values ('audi');
insert into cars (name) values ('tico');

insert into address(name, birthday, hphone, memo, food, car) values('홍길동', '1987-01-05', '010-1111-1111', '절친', 1, 3);
insert into address(name, birthday, hphone, memo, food, car) values('박길동', '2010-03-07', '010-1123-0515', '', 1, 1);
insert into address(name, birthday, hphone, memo, food, car) values('최길동', '2000-01-01', '010-5515-4574', '절친', 3, 2);
insert into address(name, birthday, hphone, memo, food, car) values('나길동', '1998-03-14', '010-7743-5743', '돈 빌림', 3, 3);
insert into address(name, birthday, hphone, memo, food, car) values('윤지원', '1996-04-22', '010-7457-6475', '', 4, 3);
insert into address(name, birthday, hphone, memo, food, car) values('고길동', '2007-09-09', '010-3511-5858', '', 4, NULL);
insert into address(name, birthday, hphone, memo, food, car) values('박길동', '1997-05-05', '010-4874-7871', '절친 아님', 2, NULL);

#########################################################################################################

select
address.ID, address.name , foods.name
from
address, foods
where
address.food = foods.IDs

#########################################################################################################


select
foods.name, foodcount

from
(
	select
	food, count(food) as foodcount
	from
	address
	group by
	food
)
as A, foods

where 
A.food = foods.id;


#########################################################################################################



장비코드 - 장비명 조인

select equip.id, equip.equipno, equip_class.name
from equip, equip_class
where equip.classid = equip_class.id;



select classid, count(classid) from equip group by classid;



select equip_class.name, A.count2
from (select classid, count(classid) as count2 from equip group by classid) as A, equip_class
where a.classid = equip_class.id;





#########################################################################################################

select equip_class.name, A.c_count
from equip_class,
(select classid, count(classid) as c_count from equip group by classid) as A
where classid = equip_class.ID;


###################################################################################

연습문제

1.
select
  address.name, cars.name
from
  address, cars
where
  address.car = cars.id
  and (cars.name = 'bmw' or cars.name = 'tico');

2.
select
  address.name, cars.name, foods.name
from
  address, cars, foods
where
  address.car = cars.id
  and address.food = foods.id 
  and (cars.name = 'sonata' or foods.name = '사과주스')
order by
  address.name;

3.
select
  address.name, cars.name, foods.name
from
  address, cars, foods
where
  address.car = cars.id
  and address.food = foods.id
  and (cars.name = 'bmw' and foods.name = '사과주스')
order by
  address.name;

4.
select
  address.name, cars.name, foods.name
from
  address, cars, foods
where
  address.car = cars.id
  and address.food = foods.id
  and (cars.name = 'bmw' or foods.name = '딸기주스')
order by
  address.name;

5.
select
  address.name, cars.name, foods.name
from
  address, cars, foods
where
  address.car = cars.id
  and address.food = foods.id
  and (cars.name = 'tico' or foods.name = '갈비')
order by
  address.name;

6.  ### != or <> or not 사용 ###
select
  address.name, foods.name
from
  address, foods
where
  address.food = foods.id
  and foods.name != '사과주스'
order by
  address.name;

7.  ### != or <> or not 사용 ###
select
  address.id, address.name
from
  address, foods
where
  address.food = foods.id
  and (foods.name != '사과주스')
order by
  address.name;

8.  ### != or <> or not 사용 ###
select
  address.name, cars.name, foods.name
from
  address, cars, foods
where
  address.car = cars.id
  and address.food = foods.id
  and (cars.name = 'tesla' and foods.name != '딸기주스')
order by
  address.name;

9.
select
  address.name, cars.name
from
  address, cars
where
  address.car = cars.id
  and (cars.name = 'sonata' and cars.name = 'tesla')
order by
  address.name;

10.
select
  address.name, cars.name
from
  address, cars
where
  address.car = cars.id
  and cars.id in (3, 5)
order by
  address.name;

11.
select
  address.name, cars.name
from
  address, cars
where
  address.car = cars.id
  and cars.id in (1, 7)
order by
  address.name;


12.
select
  address.name, cars.name
from
  address, cars
where
  address.car = cars.id
  and cars.name in ('bmw', 'tico')
order by
  address.name;


13.
select
  address.name, cars.name
from
  address, cars
where
  address.car = cars.id
  and cars.name in ('sonata', 'tesla')
order by
  address.name;

14.
select
  address.name, foods.name
from
  address, foods
where
  address.food = foods.id
  and foods.id in ( 11, 26)
order by
  address.name;

15.
select
  address.name, foods.name
from
  address, foods
where
  address.food = foods.id
  and foods.id in (8, 10)
order by
  address.name;

16.
select
  *
from
  address
where
  birthday between '2000-01-01' and '2000-12-31'
order by
  address.name;

17.
select
  address.name, address.birthday, foods.name
from
  address, foods
where
  address.food = foods.id
  and address.birthday between '2000-01-01' and '2000-12-31'
  and foods.name = '갈비'
order by
  address.name;

18.
select
  address.name, address.birthday, foods.name
from
  address, foods
where
  address.food = foods.id
  and '2000-01-01' <= address.birthday
  and foods.name <> '갈비'
order by
  address.birthday;


19.
select
  address.name
  , address.birthday
  , foods.name
from
  address
  , foods
where
  address.food = foods.id
  and '2000-01-01' <= birthday
  and not foods.name = '깐풍기'
order by
  address.birthday desc;

20.
select
  address.name
  , address.birthday
  , foods.name
from
  address
  , foods
where
  address.food = foods.id
  and foods.name not in ('깐풍기', '갈비', '탕수육', '짜장면')
order by
  address.name;

21.
select
  address.name
  , address.birthday
  , foods.name
from
  address
  , foods
where
  address.food = foods.id
  and foods.name not in ('깐풍기', '갈비', '탕수육', '짜장면')
order by
  foods.name, address.birthday;

22.
select
  *
from
  foods
order by
  name;

23.
select
  id, name, birthday
from
  address
where
  birthday between'2000-01-01' and '2000-12-31'
order by
  birthday;

24.
select
  id, name, birthday
from
  address
where
  date_part('year', birthday) between '2000' and '2002'
order by
  birthday;

25.
select
  id, name, birthday
from
  address
where
  date_part('year', birthday) between '2000' and '2002'
order by
  birthday, name;

26.
select
  *
from
  address
where
  memo = '외국인';

27.
select
  address.name, foods.name, address.memo
from
  address, foods
where
  address.food = foods.id
  and memo = '외국인'
  and (foods.name = '피자' or foods.name = '햄버거')
order by
  address.name;

28.
select
  address.name, foods.name, address.memo
from
  address, foods
where
  address.food = foods.id
  and address.memo = '외국인'
  and foods.name not in ('피자', '햄버거')
order by
  address.name;

29.
select
  address.name, address.birthday, foods.name, address.memo
from
  address, foods
where
  address.food = foods.id
  and memo = '외국인'
  and (foods.name = '피자' or foods.name = '햄버거')
  and date_part('year', birthday) between '1995' and '2000'
order by
  address.birthday;

30.
select
  name, birthday
from
  address
where
  date_part('month', birthday) = '3'
order by
  birthday, name;

31.
select
  name, birthday
from
  address
where
  date_part('day', birthday) = '1'
order by
  birthday, name;

32.
select
  address.name, birthday, foods.name
from
  address, foods
where
  address.food = foods.id
  and date_part('month', birthday) = '3'
  and foods.name = '갈비'
order by
  address.name;

33.
select
  id, name, birthday
from
  address
where
  date_part('month', birthday) between '6' and '8'
order by
  address.name, birthday desc;

34.
select
  foods.name
from
  address, foods
where
  address.food = foods.id
  and date_part('month', address.birthday) between '6' and '8'
order by
  foods.name;

35.
select
  foods.name
from
  address, foods
where
  address.food = foods.id
  and date_part('month', birthday) between '6' and '8'
group by
  foods.name
order by
  foods.name;

select
  distinct(foods.name)
from
  address, foods
where
  address.food = foods.id
  and date_part('month', birthday) between '6' and '8'
order by
  foods.name;

36.
select
  foods.name, count(address.food) as foodcount
from
  address, foods
where
  address.food = foods.id
group by
  foods.name
order by
  foods.name;

<서브쿼리>
select
  foods.name, A.foodcount
from
  (
    select
      food, count(food) as foodcount
    from
      address
    group by
      food      
  )as A, foods
where
  A.food = foods.id
order by
  foods.name;

37.
select
  foods.name, count(food) as foodcount
from
  address, foods
where
  address.food = foods.id
group by
  foods.name
order by
  foodcount desc, foods.name;

<서브쿼리>
select
  foods.name, A.foodcount
from
  (
  select
    food, count(food) as foodcount
  from
    address
  group by
    food
  )as A, foods
where
  A.food = foods.id
order by
  foodcount desc, foods.name;

38.
select
  foods.name, count(food) as foodcount
from
  address, foods
where
  address.food = foods.id
  and date_part('month', birthday) between '6' and '8'
group by
  foods.name
order by
  foodcount desc, foods.name;

<서브쿼리>
select
  foods.name, A.foodcount
from
  (
    select
      food, count(food) as foodcount
    from
      address
    where
      date_part('month', birthday) between '6' and '8'
    group by
       food    
  )as A, foods
where
  A.food = foods.id
order by
  foodcount desc, foods.name;

39.
select
  name, birthday, '만 '|| extract(year from age(birthday)) ||'세' as man_age
from
  address
order by
  man_age;

select
  name, birthday, '만 '|| date_part('year', age(birthday)) ||'세' as man_age
from
  address
order by
  man_age;

40.
select
  name, birthday, '당시 만 '|| extract(year from age('2000.01.01.', birthday))||'세' as man_age 
from
  address
order by
  birthday , name;

select
  name, birthday, '당시 만 '|| date_part('year', age('2000.01.01.', birthday))||'세' as man_age 
from
  address
order by
  birthday, name;

41.
select
  name, birthday, '당시 만 '||extract(year from age('2000.01.01.', birthday))||'세' as man_age
from
  address
where
  date_part('year', birthday) < '2000'
order by
  birthday, name;

42.
select
  id, name, replace(memo, '외국인', '외국사람')
from
  address
where
  memo = '외국인'
order by
  name;

43.
select
  foods.name, count(address.food) as foodcount
from
  address, foods
where
  address.food = foods.id
  and memo = '외국인'
group by
  foods.name
order by
  foodcount desc, name desc;

<서브쿼리>
select
  foods.name, A.foodcount
from
    (
      select
        food, count(food) as foodcount
      from  
        address
      where
        memo = '외국인'
      group by
        food
    )as A, foods
where
  A.food = foods.id
order by
  A.foodcount desc;

44.
select
  cars.name, count(address.car) as carcount
from
  address, cars
where
  address.car = cars.id
  and memo = '외국인'
group by
  cars.name
order by
  carcount desc, cars.name desc;

<서브쿼리>
select
  cars.name, A.carcount
from
  (       
    select     
      car, count(car) as carcount  
    from     
      address   
    where
      memo = '외국인'
    group by
      car 
  )as A, cars
where
  A.car = cars.id
order by
  carcount desc;

45.
select
  cars.name, count(address.car) as carcount
from
  cars, address, foods
where
  cars.id = address.car
  and foods.id = address.food
  and foods.name = '피자'
group by
  cars.name
order by
  carcount desc, cars.name;

<서브쿼리>
select cars.name, A.carcount
from
(
select car, count(car) as carcount
from address
where food = 33
group by car
)A, cars
where A.car = cars.id
order by 
  carcount desc, cars.name;

46.
select
  replace(cars.name, 'audi', '아우디'), count(address.car) as carcount
from
  address, cars, foods
where
  address.car = cars.id
  and address.food = foods.id
  and foods.name = '햄버거'
group by
 cars.name
order by
  carcount desc, cars.name;

<서브쿼리>




47.
select
  to_char(id, '000'), name
from
  address
order by
  id;

48.
select
  name, birthday, length(name)
from
  address
where
  date_part('month', birthday) = '8'
order by
  name;

49.
select
  name, length(name)
from
  address
where
  name != trim(name)
order by
  name;

50.
select
  left(name, 1)
from
  foods
order by
  name;

51.
select
  left(name, 2)
from
  foods
order by
  name;

52.
select
  left(foods.name, 2) as foodname
from
  foods, address
where
  address.food = foods.id
  and date_part('year', address.birthday) = '2000'
order by
  foods.name;

53.
select
  distinct(left(foods.name, 2))as foodname
from
  address, foods
where
  address.food = foods.id
  and date_part('year', address.birthday) = '2000'
order by
  foodname;

<서브쿼리>
select
  distinct(left(foods.name, 2))as foodname
from
(
  select birthday, food
  from address
  where date_part('year', birthday) = '2000'
)as A, foods
where
  foods.id = A.food
order by
  foodname;

<서브쿼리2>
select
 left(foods.name, 2) as foodname
from
(
select
  birthday, food
from
  address
where
  date_part('year', birthday) = '2000'
)as A, foods
where
  foods.id = A.food
group by
  foodname
order by
  foodname;

54.
select
  *
from
  address
where
  name like '%바%'
order by
  name;

55.
select
  *
from
  address
where
  substring(name, 2, 1) like '%바%'
order by
  name;

56.
select
  count(*)
from
  cars;

57.
select
  count(*)
from
  address;

58.
select
  count(car)
from
  address;

59.
select 15-7;

60.
select 35*2;

61.
select count(*)-count(car)
from address;



########################################################
교재실습

create table address
(
        ID int generated always as identity primary key,
        name varchar(10) NOT NULL,
        birthday date,
        hphone varchar(13) NOT NULL,
        memo varchar(100),
        food int,

        CONSTRAINT fk_address_food
                FOREIGN KEY(food)
                REFERENCES foods(ID)
);

insert into address(name, birthday, hphone, memo, food) values('홍길동', '1987-01-05', '010-1111-1111', '절친', 3);
insert into address(name, birthday, hphone, memo, food) values('박길동', '2010-03-07', '010-1123-0515', '', 1);
insert into address(name, birthday, hphone, memo, food) values('최길동', '2000-01-01', '010-5515-4574', '절친', 2);
insert into address(name, birthday, hphone, memo, food) values('나길동', '1998-03-14', '010-7743-5743', '돈 빌림', 3);
insert into address(name, birthday, hphone, memo, food) values('윤지원', '1996-04-22', '010-7457-6475', '', 3);
insert into address(name, birthday, hphone, memo, food) values('고길동', '2007-09-09', '010-3511-5858', '', NULL);


create table address_car_br
(
addressid int
, carid int
, primary key(addressid, carid)
, constraint FK_addresscarbr_addressid 
  foreign key (addressid) 
  references address(id)
, constraint FK_addresscarbr_carid 
  foreign key (carid) 
  references cars(id)
);

insert into address_car_br(addressid, carid) values(1,2);
insert into address_car_br(addressid, carid) values(1,3);
insert into address_car_br(addressid, carid) values(3,2);
insert into address_car_br(addressid, carid) values(6,2);
insert into address_car_br(addressid, carid) values(6,4);



select
  address.id, address.name, cars.name
from
  address, address_car_br, cars
where
  address.id = address_car_br.addressid
  and cars.id = address_car_br.carid;




select
  address.id, address.name, cars.name
from
  address, address_car_br, cars
where
  address.id = address_car_br.addressid
  and cars.id = address_car_br.carid;


insert into address_car_br(addressid, carid) values(2, 1);
insert into address_car_br(addressid, carid) values(5, 2);




create table address_food_br
  (
    addressid int
    , foodid int
    , primary key(addressid, foodid)
    , constraint FK_addressfoodbr_addressid 
    foreign key (addressid) 
    references address(id)
    , constraint FK_addressfoodbr_foodid 
    foreign key (foodid) 
     references foods(id)
  );

insert into address_food_br(addressid, foodid) values(1,6);
insert into address_food_br(addressid, foodid) values(1,5);
insert into address_food_br(addressid, foodid) values(2,5);
insert into address_food_br(addressid, foodid) values(2,4);
insert into address_food_br(addressid, foodid) values(3,4);
insert into address_food_br(addressid, foodid) values(3,3);
insert into address_food_br(addressid, foodid) values(4,3);
insert into address_food_br(addressid, foodid) values(4,2);
insert into address_food_br(addressid, foodid) values(5,2);
insert into address_food_br(addressid, foodid) values(5,1);
insert into address_food_br(addressid, foodid) values(6,1);
insert into address_food_br(addressid, foodid) values(6,6);

select
  address.id, address.name, foods.name
from
  address, address_food_br, foods
where
  address.id = address_food_br.addressid
  and foods.id = address_food_br.foodid;

create index IDX_address_name on address(name);

create index IDX_address_birthday on address(birthday);
select * from address where birthday < '2000-01-01';
drop index IDX_address_birthday;

create index IDX_address_hphone on address(hphone);
select * from address where substring(hphone, 9, 4) <= '5000';
drop index IDX_address_hphone;

create view V1 as
select * from address where name like '%길동';
select * from V1;
drop view v1;

create view address_food_v as
  select
   address.name, foods.name as fname
  from
   address, foods
  where
    address.id = foods.id
    and foods.id >= 3;

select * from address_food_v;

#####################

create table guest
(
  id int generated always as identity primary key,
  name varchar(20) not null,
  phone varchar(20),
  sid varchar(14) not null
);

create table target
(
  id int generated always as identity primary key,
  address varchar(50) not null
);

create table team
(
  id int generated always as identity primary key,
  name varchar(20) not null,
  address varchar(50) not null
);

create table apply
(
  id int generated always as identity primary key
  , guestid int not null
  , targetid int not null
  , teamid int
  , applydate date not null
  , surveydate date
  , survertime time

  , constraint fk_apply_guestid foreign key(guestid) references guest(id)
  , CONSTRAINT FK_APPLY_TARGETID FOREIGN KEY(targetID) REFERENCES target(ID)
  , CONSTRAINT FK_APPLY_TEAMID FOREIGN KEY(teamID) REFERENCES team(ID)
);


#####################################################################

